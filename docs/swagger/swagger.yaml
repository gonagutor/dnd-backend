basePath: /
definitions:
  models.Combat:
    properties:
      ac:
        type: integer
      damage:
        $ref: '#/definitions/models.Damage'
    type: object
  models.Cost:
    properties:
      copper:
        type: integer
      electrum:
        type: integer
      gold:
        type: integer
      platinum:
        type: integer
      silver:
        type: integer
    type: object
  models.Damage:
    properties:
      count:
        type: integer
      faces:
        type: integer
      range:
        type: integer
      type:
        type: integer
    type: object
  models.Item:
    properties:
      atunement:
        type: boolean
      combat:
        $ref: '#/definitions/models.Combat'
      contains:
        items:
          type: string
        type: array
      cost:
        $ref: '#/definitions/models.Cost'
      description:
        type: object
      id:
        type: string
      name:
        type: object
      page:
        type: integer
      rarity:
        type: integer
      source:
        type: string
      tags:
        items:
          type: string
        type: array
      user:
        type: string
      weight:
        type: number
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        example: gonagutor@gmail.com
        type: string
      id:
        example: 568659d6-b4c5-4b4d-8a32-4202447b6f88
        type: string
      isActive:
        example: true
        type: boolean
      name:
        example: Gonzalo
        type: string
      profilePicture:
        example: https://picsum.photos/200/300
        type: string
      role:
        example: user
        type: string
      surname:
        example: Aguado Torres
        type: string
      updatedAt:
        type: string
    type: object
  pgtype.JSONBCodec:
    type: object
  responses.CorrectResponse:
    description: Action code and readable message. Data and Pagination is optional
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  responses.FailureResponse:
    description: Error code and readable error message
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  responses.Pagination:
    properties:
      maxPage:
        example: 4
        type: integer
      page:
        example: 1
        type: integer
      pageSize:
        example: 25
        type: integer
    type: object
  v1_auth_handlers.LoginRequest:
    properties:
      email:
        example: john@doe.com
        format: email
        type: string
      password:
        example: Testtest1@
        maxLength: 64
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  v1_auth_handlers.LoginResponse:
    properties:
      accessToken:
        example: eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJ0eXBlIjoiYWNjZXNzIiwiaXNzIjoiZG5kIiwic3ViIjoiMDczZDhmN2ItMDIyNS00NGRjLWE3NTMtOGJmNzYyYmVkMzc0IiwiZXhwIjoxNzA2NDQwNjExfQ.YQ6shB0HGGw9tN5jo6cBzqjoB4LxGlNadC52exF_Hm7UYfsbf8uB-u1Sq7ukgkIkkHw-eR0VLwmjNCWmWoF6tA
        type: string
      refreshToken:
        example: eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiIkMmEkMTAkQmYwZ2FlUmxkOXRzWVEzbnBXSkFBZVlhdFlFZG9yWVVtRFl5VHl6TVA0a0lSRHdna1B3Y2EiLCJ0eXBlIjoicmVmcmVzaCIsImlzcyI6ImRuZCIsInN1YiI6IjA3M2Q4ZjdiLTAyMjUtNDRkYy1hNzUzLThiZjc2MmJlZDM3NCJ9.pv76u4p-kfAwGu8VPwzAKv5lGclrI85T2Uuu0kCT24hlfLRnjpU7iktgtlPujWuB_NVHxBKlvz_qkmyWeqLxlw
        type: string
      user:
        $ref: '#/definitions/v1_auth_handlers.NonSensitiveDataUser'
    type: object
  v1_auth_handlers.NonSensitiveDataUser:
    properties:
      id:
        example: eb7ed8ed-3316-47f3-a8c5-a0c17aa147f4
        type: string
      name:
        example: Gonzalo
        type: string
      profilePicture:
        example: https://picsum.photos/200/300
        type: string
      surname:
        example: Aguado Torres
        type: string
    type: object
  v1_auth_handlers.RecoverPasswordRequest:
    properties:
      email:
        example: john@doe.com
        format: email
        type: string
    required:
    - email
    type: object
  v1_auth_handlers.RedeemRecoveryCodeRequest:
    properties:
      password:
        type: string
      token:
        type: string
    required:
    - password
    - token
    type: object
  v1_auth_handlers.RefreshResponse:
    properties:
      accessToken:
        example: ""
        format: jwt
        type: string
    type: object
  v1_auth_handlers.RegisterRequest:
    properties:
      email:
        example: john@doe.com
        format: email
        type: string
      name:
        example: Gonzalo
        maxLength: 32
        type: string
      password:
        example: Testtest1@
        type: string
      surname:
        example: Aguado Torres
        maxLength: 64
        type: string
    required:
    - email
    - name
    - password
    - surname
    type: object
  v1_item_handler.EditCombat:
    properties:
      ac:
        type: integer
      damage:
        $ref: '#/definitions/v1_item_handler.EditDamage'
    type: object
  v1_item_handler.EditCost:
    properties:
      copper:
        type: integer
      electrum:
        type: integer
      gold:
        type: integer
      platinum:
        type: integer
      silver:
        type: integer
    type: object
  v1_item_handler.EditDamage:
    properties:
      count:
        type: integer
      faces:
        type: integer
      range:
        type: integer
      type:
        type: integer
    type: object
  v1_item_handler.EditItemBody:
    properties:
      atunement:
        type: boolean
      combat:
        $ref: '#/definitions/v1_item_handler.EditCombat'
      contains:
        items:
          type: string
        type: array
      cost:
        $ref: '#/definitions/v1_item_handler.EditCost'
      descriptom:
        $ref: '#/definitions/pgtype.JSONBCodec'
      id:
        type: string
      name:
        $ref: '#/definitions/pgtype.JSONBCodec'
      page:
        type: integer
      rarity:
        type: integer
      source:
        type: string
      tags:
        items:
          type: string
        type: array
      weight:
        type: number
    type: object
  v1_item_handler.ItemBody:
    properties:
      atunement:
        type: boolean
      combat:
        $ref: '#/definitions/models.Combat'
      contains:
        items:
          type: string
        type: array
      cost:
        $ref: '#/definitions/models.Cost'
      descriptom:
        $ref: '#/definitions/pgtype.JSONBCodec'
      id:
        type: string
      name:
        $ref: '#/definitions/pgtype.JSONBCodec'
      page:
        type: integer
      rarity:
        type: integer
      source:
        type: string
      tags:
        items:
          type: string
        type: array
      weight:
        type: number
    type: object
  v1_user_handler.UpdateUserBody:
    properties:
      isActive:
        example: false
        type: boolean
      name:
        example: Gonzalo
        type: string
      profilePicture:
        example: https://picsum.photos/200/300
        type: string
      role:
        example: user
        type: string
      surname:
        example: Aguado Torres
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: contact@dnd.gonagutor.com
    name: DNDmin Support
    url: https://dnd.gonagutor.com/support
  description: This is the API for https://dnd.gonagutor.com. This API handles content
    from the DND books, characters, campaigns and users. <br/><br/>Built by **Sergio
    Ballesteros Cedenilla** <serbalced@gmail.com> and **Gonzalo Aguado Torres** <gonagutor@gmail.com>
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: DND Api
  version: "1.0"
paths:
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login request that returns a refresh and an access token
      parameters:
      - description: Simple password and email login
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/v1_auth_handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: When the response is successful you will receive an access
            token and a refresh token, along with some basic user data
          schema:
            allOf:
            - $ref: '#/definitions/responses.CorrectResponse'
            - properties:
                data:
                  $ref: '#/definitions/v1_auth_handlers.LoginResponse'
              type: object
        "400":
          description: If a field is missing or the body couldn't be parsed the API
            will answer with a 400 code. In case a field is missing or has the incorrect
            format it will return the field which fails
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "403":
          description: The API can answer with a 403 if the password is incorrect
            or if the email has not been verified yet
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "500":
          description: If either token could not be generated it will return a 500
            code. Please report this error if you encounter it in production
          schema:
            $ref: '#/definitions/responses.FailureResponse'
      tags:
      - Auth
  /v1/auth/recover-password:
    post:
      consumes:
      - application/json
      description: Uses the provided token to change the user's password
      parameters:
      - description: The received token and the new password
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/v1_auth_handlers.RedeemRecoveryCodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: If the response is successful you will receive simple code
            and message indicating that the passworc has been changed
          schema:
            $ref: '#/definitions/responses.CorrectResponse'
        "400":
          description: If a field is missing or the body couldn't be parsed the API
            will answer with a 400 code. In case a field is missing or has the incorrect
            format it will return the field which fails
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "403":
          description: The API can answer with a 403 if the token has expired or is
            invalid
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "500":
          description: If the hashed password could not be generated it will return
            a 500 code. Please report this error if you encounter it in production
          schema:
            $ref: '#/definitions/responses.FailureResponse'
      tags:
      - Auth
  /v1/auth/recover-password-request:
    post:
      consumes:
      - application/json
      description: Uses the provided email to send a password recovery email
      parameters:
      - description: Email inside json body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/v1_auth_handlers.RecoverPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: If the response is successful you will receive simple code
            and message indicating that the email has been sent
          schema:
            $ref: '#/definitions/responses.CorrectResponse'
        "400":
          description: If a field is missing or the body couldn't be parsed the API
            will answer with a 400 code. In case a field is missing or has the incorrect
            format it will return the field which fails
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "403":
          description: The API can answer with a 403 if the email doesn't exist or
            if the user has not verified their email
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "500":
          description: If the token could not be generated it will return a 500 code.
            Please report this error if you encounter it in production
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "502":
          description: If nothing failed but the email could not be sent the server
            will return a 502 code. Please report this error if you encounter it in
            production
          schema:
            $ref: '#/definitions/responses.FailureResponse'
      tags:
      - Auth
  /v1/auth/refresh:
    post:
      description: Uses the refresh token in the header to generate a new access token
        for the user
      parameters:
      - description: Refresh token with Bearer prefix
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: If the response is successful you will receive the new accessToken
            inside the data field of the response
          schema:
            allOf:
            - $ref: '#/definitions/responses.CorrectResponse'
            - properties:
                data:
                  $ref: '#/definitions/v1_auth_handlers.RefreshResponse'
              type: object
        "400":
          description: If no token is provided the API will answer with a 400 code
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "403":
          description: The API can answer with a 403 if the token has expired or is
            invalid
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "500":
          description: If the new token could not be generated it will return a 500
            code. Please report this error if you encounter it in production
          schema:
            $ref: '#/definitions/responses.FailureResponse'
      tags:
      - Auth
  /v1/auth/register:
    post:
      consumes:
      - application/json
      description: Creates an account and sends an email for verification
      parameters:
      - description: Email, name, surname and password required for registration
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/v1_auth_handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: If the response is successful you will receive simple code
            and message indicating that the account has been created
          schema:
            $ref: '#/definitions/responses.CorrectResponse'
        "400":
          description: If a field is missing or the body couldn't be parsed the API
            will answer with a 400 code. In case a field is missing or has the incorrect
            format it will return the field which fails
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "409":
          description: If the email already exists the server will return a 409 code
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "500":
          description: If the verification token could not be generated or the user
            could not be created it will return a 500 code. Please report this error
            if you encounter it in production
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "502":
          description: If nothing failed but the email could not be sent the server
            will return a 502 code. Please report this error if you encounter it in
            production
          schema:
            $ref: '#/definitions/responses.FailureResponse'
      tags:
      - Auth
  /v1/auth/revoke:
    post:
      consumes:
      - application/json
      description: Revokes the refresh tokens
      parameters:
      - description: Access token with Bearer prefix
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: If the response is successful you will receive simple code
            and message indicating that the token has been revoked
          schema:
            $ref: '#/definitions/responses.CorrectResponse'
        "400":
          description: If no token is provided the API will answer with a 400 code
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "403":
          description: The API can answer with a 403 if the token is invalid/malformed
            or the user has not verified their email yet
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "500":
          description: If the new token secret could not be saved it will return a
            500 code. Please report this error if you encounter it in production
          schema:
            $ref: '#/definitions/responses.FailureResponse'
      tags:
      - Auth
  /v1/auth/validate-email:
    get:
      consumes:
      - application/json
      description: Validates the user email using the token sent via email
      parameters:
      - description: Validation token sent via email
        in: query
        name: Token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: If the response is successful you will receive simple code
            and message indicating that the account has been verified
          schema:
            $ref: '#/definitions/responses.CorrectResponse'
        "400":
          description: If no token is provided the API will answer with a 400 code
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "403":
          description: The API can answer with a 403 if the token is invalid/malformed
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "409":
          description: The API will answer with a 409 if the email has already been
            verified
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "500":
          description: If the user could not be saved it will return a 500 code. Please
            report this error if you encounter it in production
          schema:
            $ref: '#/definitions/responses.FailureResponse'
      tags:
      - Auth
  /v1/item/:
    get:
      consumes:
      - application/json
      description: Get all items
      parameters:
      - description: Access token with Bearer prefix
        in: header
        name: Authorization
        required: true
        type: string
      - description: The page you want to retrieve
        in: query
        name: page
        type: integer
      - description: The size of the page you want to retrieve
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: If the response is successful you will receive the items and
            pagination data
          schema:
            allOf:
            - $ref: '#/definitions/responses.CorrectResponse'
            - properties:
                ' pagination':
                  $ref: '#/definitions/responses.Pagination'
                data:
                  items:
                    $ref: '#/definitions/models.Item'
                  type: array
              type: object
        "400":
          description: If no token is provided the API will answer with a 400 code
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "403":
          description: The API can answer with a 403 if the token is invalid/malformed,
            the user has not verified their email yet or its not an admin
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "500":
          description: If the server fails to get the items it will answer with a
            500 code. Please report this error if you encounter it in production
          schema:
            $ref: '#/definitions/responses.FailureResponse'
      tags:
      - Item
  /v1/item/{item_id}:
    delete:
      consumes:
      - application/json
      description: Delete an item
      parameters:
      - description: Access token with Bearer prefix
        in: header
        name: Authorization
        required: true
        type: string
      - description: The id of the item you want to delete
        in: path
        name: item_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: If the response is successful you will receive a simple code
            and message indicating that the item has been deleted
          schema:
            $ref: '#/definitions/responses.CorrectResponse'
        "400":
          description: If no token is provided the API will answer with a 400 code
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "403":
          description: The API can answer with a 403 if the token is invalid/malformed.
            the user has not verified their email yet or (if the user is trying to
            delete public items) the user is not an admin
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "404":
          description: If the item is not found the API will answer with a 404 code
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "500":
          description: If the server fails to delete the item it will answer with
            a 500 code. Please report this error if you encounter it in production
          schema:
            $ref: '#/definitions/responses.FailureResponse'
      tags:
      - Item
    put:
      consumes:
      - application/json
      description: Edit an item
      parameters:
      - description: Access token with Bearer prefix
        in: header
        name: Authorization
        required: true
        type: string
      - description: The id of the item you want to edit
        in: path
        name: item_id
        required: true
        type: string
      - description: The body of the item you want to edit
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/v1_item_handler.EditItemBody'
      produces:
      - application/json
      responses:
        "200":
          description: If the response is successful you will receive a simple code
            and message indicating that the item has been edited
          schema:
            $ref: '#/definitions/responses.CorrectResponse'
        "400":
          description: If no token is provided the API will answer with a 400 code
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "403":
          description: The API can answer with a 403 if the token is invalid/malformed,
            the user has not verified their email yet or (if the user is trying to
            edit a public item) the user is not an admin
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "404":
          description: If the item is not found
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "500":
          description: If the server fails to edit the item it will answer with a
            500 code. Please report this error if you encounter it in production
          schema:
            $ref: '#/definitions/responses.FailureResponse'
      tags:
      - Item
  /v1/item/{user_id}:
    get:
      consumes:
      - application/json
      description: Get all items
      parameters:
      - description: Access token with Bearer prefix
        in: header
        name: Authorization
        required: true
        type: string
      - description: The page you want to retrieve
        in: query
        name: page
        type: integer
      - description: The size of the page you want to retrieve
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: If the response is successful you will receive the items and
            pagination data
          schema:
            allOf:
            - $ref: '#/definitions/responses.CorrectResponse'
            - properties:
                ' pagination':
                  $ref: '#/definitions/responses.Pagination'
                data:
                  items:
                    $ref: '#/definitions/models.Item'
                  type: array
              type: object
        "400":
          description: If no token is provided the API will answer with a 400 code
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "403":
          description: The API can answer with a 403 if the token is invalid/malformed,
            the user has not verified their email yet or (if its not an admin) its
            trying to access to other user's items
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "500":
          description: If the server fails to get the items it will answer with a
            500 code. Please report this error if you encounter it in production
          schema:
            $ref: '#/definitions/responses.FailureResponse'
      tags:
      - Item
  /v1/item/create:
    post:
      consumes:
      - application/json
      description: Create a new item
      parameters:
      - description: Access token with Bearer prefix
        in: header
        name: Authorization
        required: true
        type: string
      - description: The body of the item you want to create
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/v1_item_handler.ItemBody'
      produces:
      - application/json
      responses:
        "200":
          description: If the response is successful you will receive a simple code
            and message indicating that the item has been created
          schema:
            $ref: '#/definitions/responses.CorrectResponse'
        "400":
          description: If no token is provided the API will answer with a 400 code
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "403":
          description: The API can answer with a 403 if the token is invalid/malformed
            or the user has not verified their email yet
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "500":
          description: If the server fails to create the item it will answer with
            a 500 code. Please report this error if you encounter it in production
          schema:
            $ref: '#/definitions/responses.FailureResponse'
      tags:
      - Item
  /v1/user/:
    get:
      consumes:
      - application/json
      description: Retrieve an user by id
      parameters:
      - description: Access token with Bearer prefix
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page to show
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: If the response is successful you will receive the requested
            user inside the data key
          schema:
            allOf:
            - $ref: '#/definitions/responses.CorrectResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.User'
                  type: array
                pagination:
                  $ref: '#/definitions/responses.Pagination'
              type: object
        "400":
          description: If no token is provided the API will answer with a 400 code
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "403":
          description: The API can answer with a 403 if the token is invalid/malformed.
            the user has not verified their email yet or the user is not an admin
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "404":
          description: If the if the user could not be found it will return a 404
            code
          schema:
            $ref: '#/definitions/responses.FailureResponse'
      tags:
      - User
  /v1/user/{user_id}:
    delete:
      consumes:
      - application/json
      description: Delete an user by id
      parameters:
      - description: Access token with Bearer prefix
        in: header
        name: Authorization
        required: true
        type: string
      - description: User's id
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: If the response is successful you will receive a simple code
            and message indicating that the user has been deleted
          schema:
            $ref: '#/definitions/responses.CorrectResponse'
        "400":
          description: If no token is provided the API will answer with a 400 code
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "403":
          description: The API can answer with a 403 if the token is invalid/malformed.
            the user has not verified their email yet or (if the user is trying to
            delete other than self) the user is not an admin
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "404":
          description: If the user could not be found it will return a 404 code
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "500":
          description: If the user could not be deleted it will return a 500 code.
            Please report this error if you encounter it in production
          schema:
            $ref: '#/definitions/responses.FailureResponse'
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Retrieve an user by id
      parameters:
      - description: Access token with Bearer prefix
        in: header
        name: Authorization
        required: true
        type: string
      - description: User's id
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: If the response is successful you will receive the requested
            user inside the data key
          schema:
            allOf:
            - $ref: '#/definitions/responses.CorrectResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: If no token is provided the API will answer with a 400 code
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "403":
          description: The API can answer with a 403 if the token is invalid/malformed
            or the user has not verified their email yet
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "404":
          description: If the if the user could not be found it will return a 404
            code
          schema:
            $ref: '#/definitions/responses.FailureResponse'
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update an user by id
      parameters:
      - description: Access token with Bearer prefix
        in: header
        name: Authorization
        required: true
        type: string
      - description: User's id
        in: path
        name: user_id
        required: true
        type: string
      - description: Fields to edit. Every field is optional. If the user is not an
          admin isActive and role are ignored
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/v1_user_handler.UpdateUserBody'
      produces:
      - application/json
      responses:
        "200":
          description: If the response is successful you will receive a simple code
            and message indicating that the user has been edited
          schema:
            $ref: '#/definitions/responses.CorrectResponse'
        "400":
          description: If no token is provided the API will answer with a 400 code
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "403":
          description: The API can answer with a 403 if the token is invalid/malformed.
            the user has not verified their email yet or (if the user is trying to
            edit other than self) the user is not an admin
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "404":
          description: If the user could not be found it will return a 404 code
          schema:
            $ref: '#/definitions/responses.FailureResponse'
        "500":
          description: If the user could not be edited it will return a 500 code.
            Please report this error if you encounter it in production
          schema:
            $ref: '#/definitions/responses.FailureResponse'
      tags:
      - User
schemes:
- http
- https
swagger: "2.0"
tags:
- description: The auth system uses an access token that expires every 15 minutes
    and a refresh token
  name: Auth
- description: User management endpoints
  name: User
